import { Injectable } from '@angular/core';
import { Booking } from './booking.model';
import { BehaviorSubject } from 'rxjs';
import { AuthService } from '../auth/auth.service';
import { take, delay, tap, switchMap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

@Injectable({providedIn: 'root'})
export class BookingService {
  // tslint:disable-next-line: variable-name
  private _bookings = new BehaviorSubject<Booking[]>([]);

  get bookings() { // getter returns an observable 'bookings' to which we can subscribe
      return this._bookings.asObservable();
  }

  constructor(private authService: AuthService,
              private http: HttpClient) {}

  addBooking(
    placeId: string,
    placeTitle: string,
    placeImage: string,
    firstName: string,
    lastName: string,
    guestNumber: number,
    dateFrom: Date,
    dateTo: Date
) {
    let generatedId: string;
    const newBooking = new Booking(
      Math.random().toString(), // auto-generated id to create an object Booking, to be changed with firebase id
      placeId,
      this.authService.userId,
      placeTitle,
      placeImage,
      firstName,
      lastName,
      guestNumber,
      dateFrom,
      dateTo
    );
    return this.http.post<{name: string}>('https://ion-bnb.firebaseio.com/bookings.json',
      { ...newBooking, id: null } // overwriting the id with null
    ).pipe(switchMap(responseData => {
      generatedId = responseData.name; // .name (firebase property) is the id generated by firebase realtime database
      return this.bookings;
    }),
    take(1),
    tap(bookings => {
      newBooking.id = generatedId; // replacing the null id with the firebase id
      this._bookings.next(bookings.concat(newBooking));
    })
  );
}

  cancelBooking(bookingId: string) {
    return this.bookings.pipe(
      take(1), delay(1000),
      tap(bookings => {
        this._bookings.next(bookings.filter(eachBooking => eachBooking.id !== bookingId));
      })
    );
  }

}